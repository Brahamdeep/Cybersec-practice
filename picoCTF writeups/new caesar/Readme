# The Challenge

We found a brand new type of encryption, can you break the secret code? (Wrap with picoCTF{})
 Comment

lkmjkemjmkiekeijiiigljlhilihliikiliginliljimiklligljiflhiniiiniiihlhilimlhijil


## Understanding the given file
```
import string  
LOWERCASE_OFFSET = ord("a")  
ALPHABET = string.ascii_lowercase[:16]  
def b16_encode(plain):  
  enc = ""  
	for c in plain:  
		binary = "{0:08b}".format(ord(c))  
		enc += ALPHABET[int(binary[:4], 2)]  
		enc += ALPHABET[int(binary[4:], 2)]  
	return enc  

def shift(c, k):  
	t1 = ord(c) - LOWERCASE_OFFSET  
	t2 = ord(k) - LOWERCASE_OFFSET  
	return ALPHABET[(t1 + t2) % len(ALPHABET)]  

flag = "redacted"  
key = "redacted"  
assert all([k in ALPHABET for k in key])  
assert len(key) == 1  

b16 = b16_encode(flag)  
enc = ""  
for i, c in enumerate(b16):  
	enc += shift(c, key[i % len(key)])  
print(enc)  
```

This challenge involves deciphering an encrypted message using a combination of techniques. We need to understand Base16 encoding and the Caesar cipher to crack the code.

Encryption Process:

1. Base16 Encoding:

- The input string (flag) is converted to its binary representation (8 bits per character).
- Each byte is split into two halves (first 4 bits and next 4 bits)
- Each 4-bit binary value is mapped to a character in a predefined alphabet using a conversion scheme like Base16.
- This results in a string containing hexadecimal characters (0-9, A-F).

2. Caesar Shift Cipher:

- A single character key (key) is used to shift characters in the encoded string (Base16).
- Each character's ASCII value is shifted by the ASCII value of the key, wrapping around if necessary.
- This shift ensures the result remains within the alphabet used for Base16 encoding.

Code Breakdown:

- b16_encode function: Takes a string (plain) and converts it to Base16 encoded format. (Details of the conversion can be omitted for brevity).
- shift function: Performs a Caesar shift on a character based on a key character.
- Key Validation: Checks if the key is a single character and all characters are valid for the Base16 alphabet.

Encryption & Printing:

- The flag string is encoded using b16_encode.
- The encoded string is then shifted using the shift function with the provided key.
- The final encrypted message (enc) is printed.

Challenge Goal:

Your objective is to analyze the provided encrypted message (enc) and reverse engineer the steps to retrieve the original message (flag).
